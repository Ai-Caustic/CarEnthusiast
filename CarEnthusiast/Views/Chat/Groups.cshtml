@using Microsoft.AspNetCore.Identity
@using System.Net.Mail

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@model List<Group>
@{
    Layout = null;
}

<link rel="stylesheet" href="~/css/site.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link rel="stylesheet" href="~/font-awesome-4.5.0/css/font-awesome.css">


<div class="allcontain">
    <div class="header">
        <ul class="socialicon">
            <li><a asp-controller="Home" asp-action="Index"><i class="fa fa-home"></i></a></li>
            <li><a asp-controller="Cars" asp-action="Land"><i class="fa fa-car"></i></a></li>
            <li><a asp-controller="Chat" asp-action="Chat"><i class="fa fa-comments-o"></i></a></li>
            <li><a asp-controller="Home" asp-action="Privacy"><i class="fa fa-user-secret"></i></a></li>
        </ul>
        <ul class="givusacall">
            <li>Give us a call : +666 </li>
        </ul>
        <ul class="logreg">
            @if (SignInManager.IsSignedIn(User))
            {
                MailAddress email = new MailAddress(UserManager.GetUserName(User));
                var username = email.User;
                <li>
                    <p id="greetings">Hello @username</p>
                </li>
                <li>
                    <form id="logoutForm" class="" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = ""})">
                        <button id="logout" type="submit" class="">Logout</button>
                    </form>
                </li>

            }
            else
            {
                <li>
                    <a class="" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
                </li>
                <li>
                    <a class="" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
                </li>
            }
        </ul>
    </div>
</div>

<h2 class="text-center">Groups</h2>
<div class="card-container">
    @foreach (var group in Model)
    {
        <div id="card-@group.Id" class="card mb-3">
            <img src="~/Assets/groupPlaceholder.jpg" class="card-img-top" alt="Group Image">
            <div class="card-body">
                <h5 class="card-title">@group.GroupName</h5>
                <h6 class="card-subtitle mb-2 text-muted">
                    @group.GroupDescription
                </h6>
                @* <p class="card-text">
                </p> *@
                <input type="hidden" id="groupId" value="@group.Id" /> <!-- Add group ID -->
                <button type="button" class="btn btn-primary joinButton">Join</button>
                <a class="card-link view-messages-link" asp-controller="Chat" asp-action="Chat" asp-route-groupId="@group.Id" data-group-id="@group.Id">View Messages</a>
            </div>
        </div>
    }
</div>



<div class="container">
    <div class="row">
        <div class="col-md-6">
            <!-- Modal trigger button -->
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createGroupModal">
                Create New Group
            </button>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="createGroupModal" tabindex="-1" role="dialog" aria-labelledby="createGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createGroupModalLabel">Create Group</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createGroupForm" data-target="#createGroupModal">
                    <!-- Add data-target attribute -->
                    <label for="groupName">Group Name: </label>
                    <input type="text" name="groupName" id="groupName" required />
                    <label for="groupDesc">Group Description: </label>
                    <input type="text" name="groupDesc" id="groupDesc" maxlength="500" required />
                    <button type="submit" id="createGroupButton">Create Group</button>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script src="/_framework/aspnetcore-browser-refresh.js"></script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/ChatHub").build();

    document.getElementById("createGroupForm").addEventListener("submit", function (event) {
        event.preventDefault();
        var groupName = document.getElementById("groupName").value;
        console.log(`${groupName} group create attempt`);
        connection.invoke("CreateGroup", groupName).catch(function (err) {
            return console.error(err.toString());
        });
    });

    // Handle joining groups
    window.onload = () => {
        var joinButtons = document.querySelectorAll(".joinButton");
        joinButtons.forEach(function (button) {
            button.addEventListener("click", function (event) {
                var groupCard = button.closest(".card"); // Get the closest parent card element
                var groupName = groupCard.querySelector(".card-title").textContent; // Get the group name
                var groupIdStr = groupCard.querySelector("input[type=hidden]").value; // Get the group ID
                var groupId = parseInt(groupIdStr, 10);

                console.log(`Group ${groupName} join attempt`);

                connection.invoke("JoinGroup", groupId, groupName).catch(function (err) {
                    console.log("Group join failed due to", err);
                    return console.error(err.toString());
                });
            });
        });
    };

    // Handle the AlreadyJoinedGroup event
    connection.on("AlreadyJoinedGroup", function (groupId) {
        var groupCard = document.querySelector(`input[value='${groupId}']`).closest(".card");
        var groupName = groupCard.querySelector(".card-title").textContent;
        window.alert(`You are already in ${groupName}`);
    });

    // Handle the "View Messages" link click
            var viewMessagesLinks = document.querySelectorAll(".card-link");
            viewMessagesLinks.forEach(function (link) {
            link.addEventListener("click", function (event) {
            var groupCard = link.closest(".card");
            var groupName = groupCard.querySelector(".card-title").textContent;
            var groupIdStr = groupCard.querySelector("input[type=hidden]").value;
            var groupId = parseInt(groupIdStr, 10);
            var joined = groupCard.getAttribute("data-joined") === "true";

            if (!joined) {
                event.preventDefault();
                window.alert(`You haven't joined ${groupName} yet. Join the group to view messages.`);
            }
        });
    });

    // Handle creating groups
    document.getElementById("createGroupButton").addEventListener("click", function (event) {    
        event.preventDefault();
        var groupName = document.getElementById("groupName").value;
        var groupDesc = document.getElementById("groupDesc").value;

        // Add validation for group name TODO:
        console.log(`${groupName} group create attempt`);

        // Invoke the CreateGroup method
        connection.invoke("CreateGroup", groupName, groupDesc).catch(function (err) {
            return console.error(err.toString());
        });

        // Close the modal
        $("#createGroupModal").modal("hide");
    });

    // Add an event listener to the modal to clear the form when it is hidden
    $("#createGroupModal").on("hidden.bs.modal", function () {
        document.getElementById("createGroupForm").reset();
    });

    // Handle the GroupAlreadyExists event
    connection.on("GroupAlreadyExists", function (groupName) {
        // Show an alert or update the UI to inform the user
        window.alert(`The group name '${groupName}' already exists. Please choose a different name.`);
    });

    //Check If User Is already in group
    function checkUserInGroup(groupId) {
        connection.invoke("CheckUserInGroup", groupId).then(function (response) {
            if (response) {
                // User is in the group, you can proceed to view messages or perform other actions.
                window.location.href = `/Chat/Chat?groupId=${groupId}`;
            } else {
                // User is not in the group, show an alert or take appropriate action.
                window.alert("You are not in this group. Please join the group to access messages.");
            }
        }).catch(function (err) {
            console.error(err.toString());
        });
    }

    // Handle the "View Messages" link click
    var viewMessagesLinks = document.querySelectorAll(".view-messages-link");
    viewMessagesLinks.forEach(function (link) {
        link.addEventListener("click", function (event) {
            var groupId = link.getAttribute("data-group-id");
            checkUserInGroup(groupId);
            event.preventDefault();
        });
    });

    connection.start().then(function () {
        console.log("SignalR Connection started successfully");
    }).catch(function (err) {
        return console.error(err.toString());
    });

</script>
